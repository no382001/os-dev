
WOULD BE NICE:
- compile c on site
- hosting its own libc (im only using vargs adn ctypes rn)
- script to make it run on grub so i can demo it on copy.sh/v86

FEATURES:
  - crc and loading dynamic kernel size

fileio:
  - open/ write

fs:
  - fat16 long filename
  - ext2 support?
  - elf files

vfs:
  - 9p
  https://blog.aqwari.net/9p/
  https://blog.aqwari.net/9p/parsing/
  https://git.sr.ht/~ft/c9/tree
  - can connect to outside atleast on qemu com1 
  - 9p could use udp

networking:
  - ethernet
  - dhcp not working
  - full of memory leaks, no queue to handle requests
  - sync issues with icmp

build disk:
  (if i have 9p this is kind of irrelevant)
  on generation save the img, remove it from clean and keep backups
  when trying to generate new one, make a file comparator that shows the differences in file

adjustments:
 - adjust the linker file, put heap on _end
 - inconsistent type usage

multitaskin:
 - im not confident that semaphore actually does what it should, and the interruption logic could be improved with a better model like having priorities, placing currently io-blocked tasks to top-prio, right now its just a hack, wasting some cycles for sure
 - signalling, recovery strategies

forking should work now?

bfd font:
  - some letters are misaligned

runtime dynamic linker for binaries, instead of implementing userland and syscalls
 - when a binary is loaded, the linker would resolve the syscalls or whatever, but how, id need my own exec format, so i can know when and where something unresolved would be called, this can bite me in the back later, and i will need to replace it further down the line. but it seems like a quick and easy way to get `outside` programs running from fs
 https://forum.osdev.org/viewtopic.php?t=57631
 - this guy did something, and can exec shit right away, maybe it would be useful if i could actually run things not specifically compiled for my os only, POSIX compliance? there has to be more than that


c9:
 - c9 seems to work, but there is no way to forward COM1 to the internet, id need a network driver, and a socket model, thats pretty overkill rn
- port the rtl8139, arp, dhcp, udp drivers
https://github.com/szhou42/osdev/blob/master/src/kernel/network/udp.c#L12

- the shit that i changed to use the stack, somewhere could crash, if phsy addresses get passed around like that contantly
  - what?


TODO:
  [x] fix the scheduler, provide a wrapper so fns can finish
  [x] usan
  [ ] asan
  [x] watchdog for thread stack and kheap magic
  [x] more comprehensive thread reg/unreg
  [ ] kfree corruption
  [ ] thread the ehternet packets
  [ ] add some log groups for debugging
  [ ] write a readme and collect main features and quirks 
  [ ] ip packets are inefficient, it works but...